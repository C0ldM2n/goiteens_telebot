import telebot
from telebot import types
import sqlite3

bot = telebot.TeleBot('6071863213:AAEmCqtglY6HbR7_tlkluXa9ZlbcW8alHZk')
gigi = None
mints = None
sms = None
svc = None
hots = None
bud = None


@bot.message_handler(commands=['start'])  # start message
def start(message):
    conn = sqlite3.connect('user_inputs.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS user_inputs (id int auto_increment primary key, gigi varchar(50), '
                'mints varchar(50), sms varchar(50), svc varchar(50), hots varchar(50), bud varchar(50))')

    conn.commit()
    cur.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üíØ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ')
    btn2 = types.KeyboardButton('üíª –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')

    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, f'{message.from_user.first_name}, –≤—ñ—Ç–∞—é üëã. –ó —á–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?')
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAMLZIz0ROIeKV5cHYSaiDWUdIdpFOcAAjgLAAJO5JlLMrFH0tlPjNAvBA'
                     .format(message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])  # LINK BUTTON
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == 'üíª –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
            markup = types.InlineKeyboardMarkup()
            linkbutton = types.InlineKeyboardButton('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.lifecell.ua/uk/mobilnij'
                                                                             '-zvyazok/taryfy/')
            markup.add(linkbutton)
            bot.send_message(message.chat.id, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ ‚¨á', reply_markup=markup)

        elif message.text == 'üíØ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            startt = types.KeyboardButton('üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏')
            back = types.KeyboardButton('üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            markup.add(startt, back)

            bot.send_message(message.chat.id, 'üíØ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ\n\n–ü—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, —è –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é '
                                              '–≤–∞–º –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–∞—Ä–∏—Ñ—ñ–≤ —è–∫—ñ –º–∞—é—Ç—å –ø—ñ–¥—ñ–π—Ç–∏ –≤–∞–º.\n\n–í–∏ –≥–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏?',
                             reply_markup=markup)

        elif message.text == 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton('üíØ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ')
            btn2 = types.KeyboardButton('üíª –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
            markup.add(btn1, btn2)

            bot.send_message(message.chat.id, 'üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=markup)

        # survey

        elif message.text == 'üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            bt1 = types.KeyboardButton('<10 –ì–±')
            bt2 = types.KeyboardButton('>10 –ì–±')
            back = types.KeyboardButton('üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            markup.add(bt1, bt2, back)

            bot.send_message(message.chat.id, 'üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—ñ–¥–±–æ—Ä—É', reply_markup=markup)
            bot.send_message(message.chat.id, '–Ø–∫–∏–π –æ–±—Å—è–≥ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–∞–º –∑–∞–∑–≤–∏—á–∞–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –Ω–∞ –º—ñ—Å—è—Ü—å?', )
            bot.register_next_step_handler(message, user_gigi)


@bot.message_handler(content_types=['text'])
def user_gigi(message):
    global gigi
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton('<1000 –•–≤–∏–ª–∏–Ω')
    bt2 = types.KeyboardButton('>1000 –•–≤–∏–ª–∏–Ω')
    back = types.KeyboardButton('üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
    markup.add(bt1, bt2, back)

    gigi = message.text.strip()
    bot.send_message(message.chat.id, '–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω —Ä–æ–∑–º–æ–≤–∏ –Ω–∞ –º—ñ—Å—è—Ü—å –≤–∏ –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?')
    bot.register_next_step_handler(message, user_mints)


def user_mints(message):
    global mints
    mints = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ sms')
    bot.register_next_step_handler(message, user_sms)


def user_sms(message):
    global sms
    sms = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ service')
    bot.register_next_step_handler(message, user_svc)


def user_svc(message):
    global svc
    svc = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ hotspot')
    bot.register_next_step_handler(message, user_hots)


def user_hots(message):
    global hots
    hots = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ Budget')
    bot.register_next_step_handler(message, user_bud)


def user_bud(message):
    bud = message.text.strip()

    conn = sqlite3.connect('user_inputs.sql')
    cur = conn.cursor()
    # global = –∏–º–ø–æ—Ä—Ç –≤ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cur.execute(
        "INSERT INTO user_inputs (gigi, mints, sms, svc, hots, bud) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')" % (
            gigi, mints, sms, svc, hots, bud))
    conn.commit()
    cur.close()
    conn.close()

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (—á–µ–º —Ç–æ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('Tarifo fil', callback_data='user_inputs'))
    bot.send_message(message.chat.id, 'Polzovatel geniy', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    conn = sqlite3.connect('user_inputs.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM user_inputs')
    user_inputs = cur.fetchall()

    info = ''
    for el in user_inputs:
        info += f'Gigs: {el[1]}, Minutes: {el[2]}, SMS: {el[3]}, Service: {el[4]}, hotspot: {el[5]}, Budget: {el[6]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)


bot.polling(none_stop=True)  # nonstop working
